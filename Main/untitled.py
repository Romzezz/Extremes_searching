# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t1mRMfCHL4hEEYvWhW65w-J1twc-Kdp0
"""

def lagrange(varnames, func, restriction, bounds=None):
    """
    varnames: ['x', 'y']
    func: 'x*y'
    restriction: 'x**2 + 4*y**2 - 1'
    bounds: {'x':[-10, 10], 'y': [-1, 1]} 
    """
    assert isinstance(varnames, list), 'список переменных задан неверно'
    assert isinstance(func, str), 'функция задана неверно'
    assert isinstance(restriction, str), 'ограничивающая функция задана неверно'
    for symbol in func:
        if symbol.isalpha() and symbol not in varnames:
            raise Exception('аргументы функции не совпадают с заданными переменными')
    
    args = sympy.symbols(varnames)
    func = sympy.sympify(func)
    restriction = sympy.sympify(restriction)
    lambda_ = sympy.Symbol('lambda')
    lagrangian = func + lambda_*restriction
    partial_first = [lagrangian.diff(arg) for arg in args+[lambda_]]
    stationary_points = sympy.solve(partial_first, args+[lambda_], dict=True)
    
    if stationary_points:
        for point in stationary_points:
            point.pop(lambda_)
        
    
    if bounds:
        assert isinstance(bounds, dict), 'ограничения заданы неверно'
        stationary_points = _filter_points(stationary_points, bounds)
    
    hesse = _get_hessian(func, args)
    _show_extrema(func, stationary_points)
    return [(point, _check_point(hesse, point)) for point in stationary_points]